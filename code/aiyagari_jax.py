#--------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------#
#                     QUANTECON LECTURE JAX SERIES: THE AIYAGARI MODEL                       #
#                                                                                            #
# copied by Longye Tian 30 June 2024                                                         #
#--------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------#


#--------------------------------------------------------------------------------------------#
#                               IMPORT  AND PRELIMINARIES                                    #
#--------------------------------------------------------------------------------------------#

import matplotlib.pyplot as plt
import numpy as np
import jax
import jax.numpy as jnp
import time
from collections import namedtuple


# !nvidia-smi                                                       # check the GPU

jax.config.update("jax_enable_x64", True)                           # 64 bit floats


#--------------------------------------------------------------------------------------------#
#                 COMPUTE STATIONARY DISTRIBUTIONS OF STOCHASTIC MATRICES                    #
#--------------------------------------------------------------------------------------------#

@jax.jit
def compute_stationary(P):
    P = jnp.asarray(P)
    n = P.shape[0]
    I = jnp.eye(n)
    A = I - P.T + 1
    return jnp.linalg.solve(A, jnp.ones(n))


#--------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------#
#                                       FIRM'S SIDE                                          #
#--------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------#




#--------------------------------------------------------------------------------------------#
# FIRM -- MODEL PARAMETERS                                                                   #
#--------------------------------------------------------------------------------------------#

Firm = namedtuple('Firm', ('A', 'N', 'α', 'δ'))

def create_firm(A=1.0,
                N=1.0,
                α=0.33,
                δ=0.05):

    return Firm(A=A, N=N, α=α, δ=δ)



#--------------------------------------------------------------------------------------------#
# FIRM -- COMPUTE r given k and w given r  (Using FOCs)                                      #
#--------------------------------------------------------------------------------------------#

def r_given_k(K, firm):
    A, N, α, δ = firm
    return A * α * (N / K)**(1 - α) - δ

def r_to_w(r, firm):
    A, N, α, δ = firm
    return A * (1 - α) * (A * α / (r + δ))**(α / (1 - α))


#--------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------#
#                                  HOUSEHOLD'S SIDE                                          #
#--------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------#




#--------------------------------------------------------------------------------------------#
# HOUSEHOLD: MODEL PARAMETERS                                                                #
#--------------------------------------------------------------------------------------------#

Household = namedtuple('Household', ('β', 'a_grid', 'z_grid', 'Π'))

def create_household(β=0.96,                               # Discount factor
                     Π=[[0.9, 0.1], [0.1, 0.9]],           # Markov chain
                     z_grid=[0.1, 1.0],                    # Exogenous states
                     a_min=1e-10, a_max=20,                # Asset grid
                     a_size=200):

    a_grid = jnp.linspace(a_min, a_max, a_size)
    z_grid, Π = map(jnp.array, (z_grid, Π))
    return Household(β=β, a_grid=a_grid, z_grid=z_grid, Π=Π)



#--------------------------------------------------------------------------------------------#
# UTILITY FUNCTION                                                                           #
#--------------------------------------------------------------------------------------------#

def u(c):
    return jnp.log(c)


#--------------------------------------------------------------------------------------------#
# PRICE PARAMETERS                                                                           #
#--------------------------------------------------------------------------------------------#

Prices = namedtuple ('Price', ('r', 'w'))

def create_prices(r=0.01,
                   w=1.0):
    return Prices(r=r,w=w)



#--------------------------------------------------------------------------------------------#
#                                     BELLMAN EQUATION                                       #
#--------------------------------------------------------------------------------------------#

@jax.jit
def B(v, household, prices):
    β, a_grid,z_grid,Π  = household
    a_size, z_size = len(a_grid), len(z_grid)
    r,w = prices
    
    
